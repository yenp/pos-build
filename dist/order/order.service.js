"use strict";var __decorate=this&&this.__decorate||function(e,t,r,o){var i,a=arguments.length,n=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,r,o);else for(var d=e.length-1;0<=d;d--)(i=e[d])&&(n=(a<3?i(n):3<a?i(t,r,n):i(t,r))||n);return 3<a&&n&&Object.defineProperty(t,r,n),n},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},__param=this&&this.__param||function(r,o){return function(e,t){o(e,t,r)}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.OrderService=void 0;const common_1=require("@nestjs/common"),typeorm_1=require("@nestjs/typeorm"),typeorm_2=require("typeorm"),order_entity_1=require("../model/order.entity"),config_app_entity_1=require("../model/config_app.entity"),order_item_entity_1=require("../model/order_item.entity");let OrderService=class{constructor(e,t,r){this.orderRepository=e,this.configAppRepository=t,this.dataSource=r}async findByOrderNumber(){var e=await this.configAppRepository.findOne({where:{key:"order_number"}});return e?(e.data_number+=1,await this.configAppRepository.save(e),e.data_number):(e=this.configAppRepository.create({key:"order_number",data_number:1}),await this.configAppRepository.save(e),1)}async findById(e){return this.orderRepository.findOne({where:{id:e}})}async find(e){var{startDate:e,endDate:t}=e,e=e?new Date(e):null,t=t?new Date(t):null,r={relations:{user:!0,order_item:{product:!0}},select:{user:{name:!0},order_item:{id:!0,cost:!0,price:!0,total:!0,quantity:!0,product:{name:!0,unit:!0}}}};return e&&t&&(r.where={created_at:(0,typeorm_2.Between)(e,t)}),this.orderRepository.find(r)}async orderReport(e){var{startDate:e,endDate:t}=e,e=e?new Date(e):null,t=t?new Date(t):null,r={},e=(e&&t&&(r.where={created_at:(0,typeorm_2.Between)(e,t)}),await this.orderRepository.createQueryBuilder("order").select("SUM(order.total)","totalSum").where(r.where).getRawOne()),t=await this.orderRepository.count(r);return{total:e.totalSum,count:t}}async create(a){return this.dataSource.transaction(async e=>{try{var t=e.create(order_entity_1.Order,{user_id:a.user_id,total:a.total,order_number:a.orderNumber,wait_number:a.waitNumber,give_amount:a.give_amount,return_amount:a.return_amount,payment_method:a.payment_method}),r=await e.save(order_entity_1.Order,t);if(!a?.productOrder?.length)throw new common_1.NotFoundException("No item");for(const i of a?.productOrder){var o=e.create(order_item_entity_1.OrderItem,{order_id:r.id,price:i.price,cost:i.cost,quantity:i.quantity,product_id:i.id,total:i.price*i.quantity});await e.save(order_item_entity_1.OrderItem,o)}return r}catch(e){throw new common_1.NotFoundException(e.message)}})}async update(e){var t=new order_entity_1.Order;return t.id=e.id,this.orderRepository.save(t)}};exports.OrderService=OrderService,exports.OrderService=OrderService=__decorate([(0,common_1.Injectable)(),__param(0,(0,typeorm_1.InjectRepository)(order_entity_1.Order)),__param(1,(0,typeorm_1.InjectRepository)(config_app_entity_1.ConfigApp)),__metadata("design:paramtypes",[typeorm_2.Repository,typeorm_2.Repository,typeorm_2.DataSource])],OrderService);